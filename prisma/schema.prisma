// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         String   @default("user") @db.VarChar(20)
  firstName    String?  @map("first_name") @db.VarChar(50)
  lastName     String?  @map("last_name") @db.VarChar(50)
  department   String?  @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  notifications Notification[]
  userChangeHistoryAsTarget   UserChangeHistory[] @relation("TargetUser")
  userChangeHistoryAsPerformer UserChangeHistory[] @relation("PerformedByUser")
  auditLogsAsTarget           AuditLog[] @relation("AuditTargetUser")
  auditLogsAsPerformer        AuditLog[] @relation("AuditPerformedByUser")

  @@map("users")
}

model Direction {
  id            String    @id @db.VarChar(50)
  name          String    @db.VarChar(100)
  description   String?
  servicesCount Int       @default(0) @map("services_count")

  services Service[]

  @@map("directions")
}

model Service {
  id                String    @id @db.VarChar(50)
  directionId       String    @map("direction_id") @db.VarChar(50)
  name              String    @db.VarChar(100)
  responsiblePerson String?   @map("responsible_person") @db.VarChar(100)
  phoneExtension    String?   @map("phone_extension") @db.VarChar(10)
  serviceType       String?   @map("service_type") @db.VarChar(50)
  location          String?   @db.VarChar(200)
  description       String?
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  direction     Direction @relation(fields: [directionId], references: [id])
  notifications Notification[]

  @@map("services")
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(200)
  message   String?
  userId    Int?     @map("user_id")
  serviceId String?  @map("service_id") @db.VarChar(50)
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  user    User?    @relation(fields: [userId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("notifications")
}

model UserChangeHistory {
  id            Int      @id @default(autoincrement())
  targetUserId  Int
  action        String
  performedBy   Int
  details       String?
  createdAt     DateTime @default(now())

  targetUser      User   @relation("TargetUser", fields: [targetUserId], references: [id])
  performedByUser User   @relation("PerformedByUser", fields: [performedBy], references: [id])

  @@map("user_change_history")
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  action       String
  targetUserId Int?
  performedBy  Int?
  details      String?
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())

  targetUser      User? @relation("AuditTargetUser", fields: [targetUserId], references: [id])
  performedByUser User? @relation("AuditPerformedByUser", fields: [performedBy], references: [id])

  @@map("audit_log")
} 